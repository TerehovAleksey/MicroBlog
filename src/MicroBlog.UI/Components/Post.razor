@inject IFilterService FilterService

@if (PostModel is not null)
{
    <div class="post">
        <nav class="breadcrumb">
            <NavLink href="/">@Strings.Home</NavLink>
            @{
                var mainTag = PostModel.Tags.FirstOrDefault();
                if (mainTag is not null)
                {
                    <span class="mx-2">></span>
                    <a href="#" @onclick="()=>FilterService.SearchByTag(mainTag)">@mainTag</a>
                }
            }
            <span class="mx-2">></span>
            <span>@PostModel.Title</span>
        </nav>
        <h1 class="post-title">@PostModel.Title</h1>
        <div class="post-meta">
            <a class="post-author" href="#">
                <span class="oi oi-person ms-2"></span>
                @PostModel.Author
            </a>
            <a class="post-date" href="#">
                <span class="oi oi-clock ms-2"></span>
                @PostModel.DatePublished.ToShortDateString()
            </a>
        </div>
        <div class="post-body">
            <img src="@PostModel.Cover" alt="post">
            <div>
                <br>
            </div>
            <div>
                @((MarkupString)_content)
            </div>
        </div>
        <div class="post-body">
            <PostTags Tags="@PostModel.Tags" />
        </div>
        <div class="post-body">
            <PostShare Slug="@PostModel.Slug" />
        </div>
    </div>
}


@code {
    
    private string _content = string.Empty;
    private MarkdownPipeline _pipeline;

    [Parameter, EditorRequired]
    public PostDto? PostModel { get; set; }
    
    public Post()
    {
        _pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseColorCode()
        .Build();
    }

    protected override void OnParametersSet()
    {
        if (PostModel is not null && !string.IsNullOrEmpty(PostModel.Content))
        {
            _content = Markdown.ToHtml(PostModel.Content, _pipeline);
        }
        base.OnParametersSet();
    }
}