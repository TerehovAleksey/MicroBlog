@page "/"
@inject IPostService PostService
@inject IFilterService FilterService
@implements IDisposable

<PageTitle>@Strings.Home</PageTitle>
<PostFilterMessage Filter="_filter" />
<Loader IsLoading="_isLoading" />

@if (_cardsModel is not null && !_isLoading)
{
    @foreach (var post in _cardsModel.Posts)
    {
        <PostCard CardModel="post" />
    }

    if (!_cardsModel.Posts.Any())
    {
        <div class="no-posts">
            @Strings.NoResultsFound
        </div>
    }

    else if (_cardsModel.Page < _cardsModel.TotalPages)
    {
        <div class="text-center">
            <button class="load-more">@Strings.LoadMore</button>
        </div>
    }
    else
    {
        <div class="text-center">
            <span class="load-more no-more">@Strings.ThatIsAll</span>
        </div>
    }
}

@code {

    private PostsModel? _cardsModel;
    private PostFilter? _filter;
    private bool _isLoading;

    protected override Task OnInitializedAsync()
    {
        _filter = FilterService.Filter;
        FilterService.FilterChanged += FilterServiceOnFilterChanged;
        Task.Run(async () => await LoadPosts(_filter));
        return base.OnInitializedAsync();
    }

    private void FilterServiceOnFilterChanged(PostFilter filter)
    {
        _filter = filter;
        Task.Run(async() => await LoadPosts(_filter));
    }

    private async Task LoadPosts(PostFilter filter)
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var posts = await PostService.GetPostsAsync(filter);
            _cardsModel = new PostsModel()
                {
                    Page = posts.MetaData.CurrentPage,
                    TotalPages = posts.MetaData.TotalPages,
                    Posts = posts.Select(p => new PostCardModel
                    {
                        Author = p.Author,
                        Tag = p.MainTag,
                        Content = p.Description,
                        Date = p.DatePublished,
                        Title = p.Title,
                        Cover = p.Cover,
                        Slug = p.Slug
                    })
                };
        }
        catch (Exception)
        {
            //
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        FilterService.FilterChanged -= FilterServiceOnFilterChanged;
    }

}